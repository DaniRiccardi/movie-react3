{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\"; // recibe la url donde hacer el fetch y las opciones\n\nexport default function useFetch(url, options) {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null); // hacemos petición\n\n  useEffect(() => {\n    // creamos funcion anonima peo asincrona\n    (async () => {\n      try {\n        const res = await fetch(url, opctions);\n        const json = await res.json();\n        setLoading(false);\n        setResult(json);\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n      }\n    })();\n  }, [options, url]);\n  return {\n    loading,\n    result,\n    error\n  };\n}\n\n_s(useFetch, \"vUYP4gdq1WB96qrJYR6o5uFLyWQ=\");","map":{"version":3,"sources":["/home/operador/Documentos/cursoreact/movie-react/src/hooks/useFetch.js"],"names":["useState","useEffect","useFetch","url","options","loading","setLoading","result","setResult","error","setError","res","fetch","opctions","json","err"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAAA;;AAC7C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC,CAH6C,CAK7C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,KAAC,YAAY;AACX,UAAI;AACF,cAAMU,GAAG,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAMU,QAAN,CAAvB;AACA,cAAMC,IAAI,GAAG,MAAMH,GAAG,CAACG,IAAJ,EAAnB;AACAR,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,QAAAA,SAAS,CAACM,IAAD,CAAT;AACD,OALD,CAKE,OAAOC,GAAP,EAAY;AACZL,QAAAA,QAAQ,CAACK,GAAD,CAAR;AACAT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAVD;AAWD,GAbQ,EAaN,CAACF,OAAD,EAAUD,GAAV,CAbM,CAAT;AAeA,SAAO;AAAEE,IAAAA,OAAF;AAAWE,IAAAA,MAAX;AAAmBE,IAAAA;AAAnB,GAAP;AACD;;GAtBuBP,Q","sourcesContent":["import { useState, useEffect } from \"react\";\n\n// recibe la url donde hacer el fetch y las opciones\nexport default function useFetch(url, options) {\n  const [loading, setLoading] = useState(true);\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n\n  // hacemos petición\n  useEffect(() => {\n    // creamos funcion anonima peo asincrona\n    (async () => {\n      try {\n        const res = await fetch(url, opctions);\n        const json = await res.json();\n        setLoading(false);\n        setResult(json);\n      } catch (err) {\n        setError(err);\n        setLoading(false);\n      }\n    })();\n  }, [options, url]);\n\n  return { loading, result, error };\n}\n"]},"metadata":{},"sourceType":"module"}